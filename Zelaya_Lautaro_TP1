#include <stdio.h>
#include <string.h>

#define MAX_OPERATORS 7
#define NUM_FOOD_TYPES 4

// Definición de colores para la presentación
#define RESET   "\033[0m"
#define RED     "\033[1;31m"
#define GREEN   "\033[1;32m"
#define YELLOW  "\033[1;33m"
#define BLUE    "\033[1;34m"
#define MAGENTA "\033[1;35m"
#define CYAN    "\033[1;36m"

// Estructura para almacenar los datos de las viandas
typedef struct {
    char name[20];
    int price;
    int total_sales;
    int sales_over_4_units;
} FoodItem;

// Estructura para almacenar los datos de los operadores
typedef struct {
    int id;
    int total_sales;
    float commission;
} Operator;

// Función para mostrar un menú de selección de viandas
int showFoodMenu(FoodItem food_items[]) {
    printf(YELLOW "Seleccione el tipo de vianda:\n" RESET);
    for (int i = 0; i < NUM_FOOD_TYPES; i++) {
        printf("%d. %s\n", i + 1, food_items[i].name);
    }
    printf(YELLOW "Opción: " RESET);
    int choice;
    scanf("%d", &choice);
    return choice;
}

// Función para procesar un pedido
void processOrder(FoodItem food_items[], Operator operators[], int* sales_over_4_units) {
    int operator_id;
    int food_choice;
    int quantity;

    printf(BLUE "Ingrese el ID del operador (0 para finalizar): " RESET);
    scanf("%d", &operator_id);
    if (operator_id == 0) {
        return;
    }
    if (operator_id < 1 || operator_id > MAX_OPERATORS) {
        printf(RED "ID de operador inválido.\n" RESET);
        return;
    }

    food_choice = showFoodMenu(food_items);
    if (food_choice < 1 || food_choice > NUM_FOOD_TYPES) {
        printf(RED "Opción de vianda inválida.\n" RESET);
        return;
    }

    printf(CYAN "Ingrese la cantidad: " RESET);
    scanf("%d", &quantity);

    food_items[food_choice - 1].total_sales += quantity;
    operators[operator_id - 1].total_sales += quantity;

    if (quantity > 4) {
        food_items[food_choice - 1].sales_over_4_units += quantity;
        operators[operator_id - 1].commission += (food_items[food_choice - 1].price * quantity * 0.13);
        *sales_over_4_units += quantity;
    } else {
        operators[operator_id - 1].commission += (food_items[food_choice - 1].price * quantity * 0.10);
    }
}

int main() {
    FoodItem food_items[NUM_FOOD_TYPES] = {
        {"Vegetales", 0, 0, 0},
        {"Carnes", 0, 0, 0},
        {"Pescado", 0, 0, 0},
        {"Frutas", 0, 0, 0}
    };
    Operator operators[MAX_OPERATORS] = {0};
    int sales_over_4_units = 0;

    // Cargar los precios de las viandas
    printf(GREEN "Ingrese los precios de las viandas:\n" RESET);
    for (int i = 0; i < NUM_FOOD_TYPES; i++) {
        printf(CYAN "%s: " RESET, food_items[i].name);
        scanf("%d", &food_items[i].price);
    }

    // Procesar los pedidos
    while (1) {
        processOrder(food_items, operators, &sales_over_4_units);
    }

    // Mostrar los resultados
    printf(GREEN "\nResultados:\n" RESET);
    printf(YELLOW "Ventas que superaron las 4 unidades: %d\n" RESET, sales_over_4_units);

    printf(YELLOW "Ganancia por tipo de vianda:\n" RESET);
    for (int i = 0; i < NUM_FOOD_TYPES; i++) {
        printf(CYAN "%s: $%d\n" RESET, food_items[i].name, food_items[i].total_sales * food_items[i].price);
    }

    printf(YELLOW "Ventas y comisiones por operador:\n" RESET);
    for (int i = 0; i < MAX_OPERATORS; i++) {
        if (operators[i].total_sales > 0) {
            printf(MAGENTA "Operador %d: %d unidades vendidas, comisión: $%.2f\n" RESET, i + 1, operators[i].total_sales, operators[i].commission);
        }
    }

    return 0;
}









#include<stdio.h>
main () {
int caser, numero = 0;
int a = 0;
int b = 0;
int c = 0;
printf ("ingrese numero para hacer: 1(ver si es negativo o positivo), 2(ver si es par o no par), 3(ver si es multiplo de 2 o 3), 4(dados 3 numeros cual es el mayor)");
scanf ("%d", &caser);
switch(caser) {
	case 1:
		
		printf("ingrese un numero para ver si es positivo, negativo");
		scanf ("%d", &numero);
		if (numero>0) {
		printf ("el numero es positivo");
		}
		 if (numero<0){
		printf ("el numero es negativo");
		}
		break;
	case 2:
		printf ("ingresar un numero para saber si es par o inpar");
		scanf ("%d", &numero);
		if (numero%2 == 0)
		printf ("el numero es par");
		else 
		printf (" es inpar");
		break ;
	case 3:
		printf ("ingresar un numero para saber si es multiplo de 2 o de 3");
		scanf("%d", &numero);
		if (numero%2 == 0)
			printf ( "el numero es multiplo de 2\n");
		else if (numero%3== 0)
			printf ("el numero es multiplo de 3\n");
		
		break;
	case 4:
		printf ("ingresar el valor de a: ");
		scanf ("%d",& a);
		printf ("ingrese el valor de b: ");
		scanf ("%d", & b);
		printf ("ingrese el valor de c: ");
		scanf ("%d", c);
		if (a>b){
if(a>c){
printf("A es el mayor");break;
}
else{ if(a==c){
printf("A y C son los mayores");break;}
else{
printf("C es el mayor");break;
}

}
}
if (a==b){
if(a>c){
printf("A y B son los mayores");break;
}
else{ if (a==c){
printf("los 3 son iguales");break;}
else{
printf("C es el mayor");break;
}

}
}
if(b>c){
printf("B es el mayor");break;}
else{ if (b==c){
printf("B y C son iguales");break;}
else{
printf("C es el mayor");break;
}

}
}	
	
};
